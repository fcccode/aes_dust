; Listing generated by Microsoft (R) Optimizing Compiler Version 19.15.26726.0 

	TITLE	C:\hub\aes_dust\aesc.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_M
PUBLIC	_S
PUBLIC	_E
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogspy
; File c:\hub\aes_dust\aesc.c
;	COMDAT _E
_TEXT	SEGMENT
tv683 = -44						; size = 4
_s$GSCopy$1$ = -40					; size = 4
_x$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_s$ = 8							; size = 4
_E	PROC						; COMDAT

; 47   : void E(B *s) {

	sub	esp, 44					; 0000002cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+44], eax
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _s$[esp+48]
	lea	eax, DWORD PTR _x$[esp+52]
	push	esi
	push	edi
	push	8
	pop	ecx
	mov	esi, ebp
	mov	DWORD PTR _s$GSCopy$1$[esp+60], ebp
	lea	edi, DWORD PTR _x$[esp+60]

; 48   :     W i,w,x[8];
; 49   :     B c=1,*k=(B*)&x[4];

	mov	bl, 1
	rep movsd
	mov	esi, ebp
	sub	esi, eax
	mov	DWORD PTR tv683[esp+60], esi
$LL5@E:

; 50   :     
; 51   :     // copy 128-bit plain text + 128-bit master key to x
; 52   :     F(8)x[i]=((W*)s)[i];
; 53   : 
; 54   :     for(;;) {
; 55   :       // AddRoundKey
; 56   :       F(16)s[i]=((B*)x)[i]^k[i];

	xor	edx, edx
$LL41@E:
	lea	ecx, DWORD PTR _x$[esp+60]
	add	ecx, edx
	mov	al, BYTE PTR [ecx+16]
	xor	al, BYTE PTR [ecx]
	inc	edx
	mov	BYTE PTR [esi+ecx], al
	cmp	edx, 16					; 00000010H
	jb	SHORT $LL41@E

; 57   :       // if round 11, stop
; 58   :       if(c==108)break;

	cmp	bl, 108					; 0000006cH
	je	$LN30@E

; 59   :       // ExpandKey
; 60   :       F(4)k[i]^=S(k[12+((i-3)&3)]);k[0]^=c;

	xor	edi, edi
$LL13@E:
	lea	eax, DWORD PTR [edi+1]
	and	eax, 3
	movzx	eax, BYTE PTR _x$[esp+eax+88]
	push	eax
	call	_S
	xor	BYTE PTR _x$[esp+edi+80], al
	inc	edi
	pop	ecx
	cmp	edi, 4
	jb	SHORT $LL13@E
	xor	BYTE PTR _x$[esp+76], bl

; 61   :       // update round constant
; 62   :       c=M(c);

	movzx	eax, bl
	push	eax
	call	_M
	mov	bl, al
	xor	edi, edi
	lea	eax, DWORD PTR _x$[esp+84]
	pop	ecx
	sub	ebp, eax
$LL16@E:

; 63   :       // SubBytes and ShiftRows
; 64   :       F(16)k[i+4]^=k[i], 

	lea	edx, DWORD PTR _x$[esp+80]
	mov	esi, edi
	add	edx, edi
	and	esi, 3
	movzx	eax, BYTE PTR [edx+ebp]
	mov	cl, BYTE PTR [edx-4]
	xor	BYTE PTR [edx], cl
	push	eax
	call	_S
	pop	ecx
	mov	ecx, edi
	shr	ecx, 2
	sub	ecx, esi
	and	ecx, 3
	inc	edi
	lea	ecx, DWORD PTR [esi+ecx*4]
	mov	BYTE PTR _x$[esp+ecx+60], al
	cmp	edi, 16					; 00000010H
	jb	SHORT $LL16@E

; 65   :         ((B*)x)[(i&3)+(((i/4)-(i&3))&3)*4]=S(s[i]);
; 66   :       // if not round 11
; 67   :       if(c!=108)

	mov	esi, DWORD PTR tv683[esp+60]
	mov	ebp, DWORD PTR _s$GSCopy$1$[esp+60]
	cmp	bl, 108					; 0000006cH
	je	$LL5@E

; 68   :         // MixColumns
; 69   :         F(4)w=x[i],x[i]=R(w,8)^R(w,16)^R(w,24)^M(R(w,8)^w);

	xor	ebp, ebp
$LL19@E:
	mov	esi, DWORD PTR _x$[esp+ebp*4+60]
	mov	edi, esi
	ror	edi, 8
	mov	eax, edi
	xor	eax, esi
	push	eax
	call	_M
	pop	ecx
	mov	ecx, esi
	rol	esi, 8
	rol	ecx, 16					; 00000010H
	xor	eax, ecx
	xor	eax, esi
	xor	eax, edi
	mov	DWORD PTR _x$[esp+ebp*4+60], eax
	inc	ebp
	cmp	ebp, 4
	jb	SHORT $LL19@E

; 70   :     }

	mov	esi, DWORD PTR tv683[esp+60]
	mov	ebp, DWORD PTR _s$GSCopy$1$[esp+60]
	jmp	$LL5@E
$LN30@E:

; 71   : }

	mov	ecx, DWORD PTR __$ArrayPad$[esp+60]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 44					; 0000002cH
	ret	0
_E	ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\hub\aes_dust\aesc.c
;	COMDAT _S
_TEXT	SEGMENT
_c$1$ = -1						; size = 1
_x$ = 8							; size = 1
_i$1$ = 11						; size = 1
_S	PROC						; COMDAT

; 37   : B S(B x) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx

; 38   :     B i,y,c;
; 39   :     if(x) {

	mov	bl, BYTE PTR _x$[ebp]
	test	bl, bl
	je	SHORT $LN6@S

; 40   :       for(c=i=0,y=1;--i;y=(!c&&y==x)?c=1:y,y^=M(y));

	xor	al, al
	mov	BYTE PTR _i$1$[ebp], 255		; 000000ffH
	mov	BYTE PTR _c$1$[ebp], al
	mov	bh, 1
$LL4@S:
	test	al, al
	jne	SHORT $LN10@S
	cmp	bh, bl
	jne	SHORT $LN10@S
	mov	BYTE PTR _c$1$[ebp], 1
	mov	bh, 1
$LN10@S:
	movzx	eax, bh
	push	eax
	call	_M
	xor	bh, al
	sub	BYTE PTR _i$1$[ebp], 1
	mov	al, BYTE PTR _c$1$[ebp]
	pop	ecx
	jne	SHORT $LL4@S

; 41   :       x=y;F(4)x^=y=(y<<1)|(y>>7);

	push	4
	mov	bl, bh
	pop	eax
$LL7@S:
	rol	bh, 1
	xor	bl, bh
	sub	eax, 1
	jne	SHORT $LL7@S
$LN6@S:

; 42   :     }
; 43   :     return x^99;

	xor	bl, 99					; 00000063H
	mov	al, bl
	pop	ebx

; 44   : }

	leave
	ret	0
_S	ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\hub\aes_dust\aesc.c
;	COMDAT _M
_TEXT	SEGMENT
_x$ = 8							; size = 4
_M	PROC						; COMDAT

; 33   :     W t=x&0x80808080;

	mov	ecx, DWORD PTR _x$[esp-4]
	and	ecx, -2139062144			; 80808080H

; 34   :     return((x^t)*2)^((t>>7)*27);

	mov	eax, ecx
	shr	ecx, 7
	xor	eax, DWORD PTR _x$[esp-4]
	imul	ecx, ecx, 27
	add	eax, eax
	xor	eax, ecx

; 35   : }

	ret	0
_M	ENDP
_TEXT	ENDS
END
